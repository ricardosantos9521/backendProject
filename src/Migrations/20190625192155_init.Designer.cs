// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backendProject.Database;

namespace backendProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190625192155_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("backendProject.Database.AccountTables.Identity", b =>
                {
                    b.Property<string>("SubjectId");

                    b.Property<string>("Issuer");

                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("SubjectId", "Issuer");

                    b.ToTable("Identity");
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.Profile", b =>
                {
                    b.Property<Guid>("UniqueId");

                    b.Property<DateTime?>("BirthDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Picture");

                    b.HasKey("UniqueId");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.RefreshToken", b =>
                {
                    b.Property<Guid>("Token")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpiresUtc");

                    b.Property<DateTime>("IssuedUtc");

                    b.Property<Guid>("SessionId");

                    b.HasKey("Token");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.Session", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FirstLogin");

                    b.Property<DateTime>("LastLogin");

                    b.Property<Guid>("UniqueId");

                    b.HasKey("SessionId");

                    b.HasIndex("UniqueId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("backendProject.Database.AdminTables.Admin", b =>
                {
                    b.Property<Guid>("UniqueId");

                    b.HasKey("UniqueId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.Profile", b =>
                {
                    b.HasOne("backendProject.Database.AccountTables.Identity", "Identity")
                        .WithOne("Profile")
                        .HasForeignKey("backendProject.Database.AccountTables.Profile", "UniqueId")
                        .HasPrincipalKey("backendProject.Database.AccountTables.Identity", "UniqueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.RefreshToken", b =>
                {
                    b.HasOne("backendProject.Database.AccountTables.Session", "Session")
                        .WithOne("RefreshToken")
                        .HasForeignKey("backendProject.Database.AccountTables.RefreshToken", "SessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backendProject.Database.AccountTables.Session", b =>
                {
                    b.HasOne("backendProject.Database.AccountTables.Identity", "Identity")
                        .WithMany("Sessions")
                        .HasForeignKey("UniqueId")
                        .HasPrincipalKey("UniqueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("backendProject.Database.AdminTables.Admin", b =>
                {
                    b.HasOne("backendProject.Database.AccountTables.Identity", "Identity")
                        .WithOne("Admin")
                        .HasForeignKey("backendProject.Database.AdminTables.Admin", "UniqueId")
                        .HasPrincipalKey("backendProject.Database.AccountTables.Identity", "UniqueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
